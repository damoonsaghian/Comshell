Rust + Streams + GTK
"http://gtk-rs.org/docs/gtk/"
"https://github.com/gtk-rs/examples/tree/master/src/bin"
"http://gtk-rs.org/docs/sourceview/"
"https://wiki.gnome.org/Projects/GtkSourceView"
"https://github.com/gtk-rs/webkit2gtk-rs"
"https://github.com/antoyo/relm"

Arch Linux provides a shared_library distribution system, which is simple and effective, and is very close to the original build process;

boot to an existing Arch Linux (the live image, or an already installed Arch Linux with arch-install-scripts package installed) then:
; timedatectl set-ntp true
list disks using "fdisk -l"; then use "fdisk /dev/sdx" to create 3 partitions:
  , +1M BIOS boot (code 4)
  , +550G EFI System (code 1)
  , and the rest for Linux filesystem (code 20)
format the partitions:
  ; mkfs.fat -F32 /dev/sdx2; mkfs.btrfs /dev/sdx3
  BTRFS is used because journaling file systems can only protect metadata, at an acceptable performance; since they need to write all file system operations twice, once to the journal, and once to the file system;
  copy_on_write provides consistency for both data and metadata; also, it can offer integrity of data and metadata (using checksums), at an acceptable overhead;
  in addition, COW also supports the creation of cheap snapshots and clones (because it does not overwrite data in place); users can take fast online backups without the need to use any special software technique like LVM;
; mount /dev/sdx3 /mnt

; pacstrap /mnt pacman
; arch-chroot /mnt
install packages (to save bandwidth you can copy your already downloaded packages to "/mnt/var/cache/pacman/pkg"):
; pacman -S grub sed intel-ucode linux systemd-sysvcompat btrfs-progs nano man-db logrotate networkmanager pulseaudio-alsa sudo udisks2 ttf-fira-mono ttf-droid numix-gtk-theme xorg-server xf86-video-{intel,nouveau,amdgpu} xorg-xinit gtk3 gtksourceview3 vte3 gst-plugins-{base,good,bad} gst-libav webkit2gtk rust rust-docs gcc

install bootloader:
; grub-install --target=i386-pc /dev/sdx
; mkdir /boot/efi; mount /dev/sdx2 /boot/efi
; grub-install --target=x86_64-efi --efi-directory=/boot/efi --removable
; grub-mkconfig -o /boot/grub/grub.cfg
; nano /boot/grub/grub.cfg
  set timeout = 0

create user:
; useradd -m -G wheel user1
; passwd -d user1
; EDITOR=nano visudo
  %wheel ALL=(ALL) ALL
; mkdir /etc/systemd/system/getty@tty1.service.d
; nano /etc/systemd/system/getty@tty1.service.d/override.conf
  [Service]
  ExecStart=
  ExecStart=-/usr/bin/agetty --autologin user1 --noclear %I $TERM

; systemctl enable NetworkManager.service
; systemctl enable systemd-timesyncd.service
; exit
; reboot

; mkdir -p ~/.config/gtk-3.0; nano ~/.config/gtk-3.0/settings.ini
  [Settings]
  gtk-theme-name = Numix
  gtk-font-name = Sans
; nano ~/.bash_profile
  export TZ="/usr/share/zoneinfo/<your_location>"
  startx
; cp /etc/X11/xinit/xinitrc ~/.xinitrc; nano ~/.xinitrc
  exec cargo run --release --manifest-path ~/projects/Comshell/Cargo.toml
