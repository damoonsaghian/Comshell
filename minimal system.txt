use Arch Linux to setup a minimal operating system (without a windowing system).
boot to an existing Arch Linux (installed or live) then:
  timedatectl set-ntp true
  prepare the disk (use lsblk to identify the block devices), and mount it:
    mkfs.btrfs -f /dev/sdx
    mount /dev/sdx /mnt
  pacstrap /mnt grub sed intel-ucode linux systemd-sysvcompat btrfs-progs dhcpcd pacman nano man-db logrotate
  arch-chroot /mnt
  bootloader:
    grub-install --target=i386-pc /dev/sdx
    grub-mkconfig -o /boot/grub/grub.cfg
  systemctl enable dhcpcd.service; timedatectl set-ntp true
  automatic login:
    systemctl edit getty@tty1
      [Service]
      ExecStart=
      ExecStart=-/usr/bin/agetty --autologin root --noclear %I $TERM
  exit; reboot

use btrfs, because journaling file systems can only protect metadata at an acceptable performance, since they need to write all file system operations twice, once to the journal, and once to the file system
copy'on'write provides consistency for both data and metadata
also, it can offer integrity of data and metadata (using checksums), at an acceptable overhead.
in addition, c'o'w also supports the creation of cheap snapshots and clones (because it does not overwrite data in place). users can take fast online backups without the need to use any special software technique like l'v'm.

qt5-declarative qt5-webkit qt5-3d qt5-multimedia
qml-module-qtquick-controls2 qml-module-qtquick-controls
cmake gcc pkgconfig rust

go to Comshell/cargo dir and:
  cargo build --release
  sudo cp .cache/release/comshell /comshell/comshell
  cp -R ../.data /comshell/
add this line to "~/.bash_profile":
  exec /comshell/comshell

Comshell looks for projects in "~/projects/" and "/projects/".
a shared project directory can be created like this:
  mkdir /projects; chmod a+w /projects
