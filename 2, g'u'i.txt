retained'mode (scene'graph) graphics library
"https://www.enlightenment.org/program_guide/evas/ui_rendering_mode"
"https://docs.enlightenment.org/efl/current/evas_main.html"

GTK is good for text, image, and layouts. it has good Rust bindings (even for Gstreamer and Webkit). but it doesn't provide a 3d scene'graph.
Qt has retained 2d/3d, but Rust bindings are terrible. and it seems that creating a good binding is impossible.
EFL has scene'graph based graphics from the ground up. but its image'based (as opposed to vector'based), maintenance is not very good, and there is no active Rust bindings.

Clutter seems to be a good choice. there is no actively maintained Rust bindings for Clutter. but it seems easy to create one:
  "https://github.com/gtk-rs/gir/"
the scene'graph in Clutter is made up of actors. inside an actor, we can draw anything, using (immediate'mode) Cogl a'p'i.
"https://developer.gnome.org/clutter-cookbook/stable/actors-non-rectangular.html"

to install Clutter in Windows use MSYS2.
you must also add MSYS2 bin directory to the paths environment variable. e'g for 64 bit version:
  SET PATH=%PATH%;C:\msys64\mingw64\bin
  SETX PATH "%PATH%"

= Cogle inside Clutter
once you have a custom actor, override the paint method with this:
static void scene_actor_paint (ClutterActor *actor) {
  CoglMatrix mvMatrix, pMatrix;
  
  cogl_get_modelview_matrix( &mvMatrix );
  cogl_get_projection_matrix( &pMatrix );
  
  cogl_set_modelview_matrix( &matrix );
  
  cogl_perspective( fov,
    (float)stage_width / (float)stage_height,
    zNear,
    zFar );
  
  // Let pilot know its position and attitude
  pilot_setPosition( telemetry.lat, telemetry.lon, telemetry.alt );
  pilot_setAttitude( telemetry.pitch, telemetry.roll, telemetry.yaw );
  
  // This rotates the world around the pilot...
  pilot_display();
  
  // show some objects
  yyyyyyyy_display();
  ......
  
  cogl_set_modelview_matrix( &mvMatrix );
  cogl_set_projection_matrix( &pMatrix );
}

and then in order to render some other object in this scene:
void yyyyyyyy_display() {
  cogl_push_source( material );

  cogl_push_matrix ();
  cogl_translate( home_e, home_n, home_d );
  cogl_rotate( home_hdg, 0.0, 0.0, 1.0 );
  cogl_rotate( home_elev, 1.0, 0.0, 0.0 );
  
  cogl_polygon( vertices, 12, FALSE );      
  cogl_pop_matrix ();

  cogl_pop_source();
}

so this is how you jump out of the clutter loop:
1, define a custom actor.
2, define some properties that modify how things are rendered and some other general behavior.
3, override the paint loop. save the matrices, define your own matrices, call your custom drawing code in 3d (has to be cogl) and then put the matrices back as you found them.