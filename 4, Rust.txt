Rust makes bad programming hard, and good programming fun;
Rust does not hide inherent complexity, in fact it bolds it, so we can see it, and avoid it;
by inherent complexity i mean a complexity which can not be abstracted away completely;
  ie if we try to hide it, it will re_emerge somewhere else;
in fact, hiding inherent complexity usually leads to choosing the wrong approach;

sharing mutable data,
  ie having a mutable reference to some data, while it is shared using other references,
  is the root of many inherent complexities;
"https://manishearth.github.io/blog/2015/05/17/the-problem-with-shared-mutability/"
the basic problem in concurrent programming is sharing mutable data;

a data race happens when these three behaviors occur:
, two or more pointers access the same data at the same time;
, at least one of the pointers is being used to write to the data;
, thereâ€™s no mechanism being used to synchronize access to the data;

to prevent sharing mutable data, we can abandon mutability like in Haskell;
but since mutability is necessary any way, it introduces a complicated mechanism (Monads);

another approach to deal with concurrently shared mutable data, is the one used in Pony;
"https://www.ponylang.io/"
it doesn't abandon aliasing nor mutability,
  instead it controls them using reference capabilities;
Pony's approach introduces many complexities, especially when dealing with generics;

a better approach is done by Rust, a language which overall has a better design too;
this approach even allows Rust to limit reference counting,
  to situations where it's absolutely necessary;
Pony_like actors can be done in Rust using "may_actor";
"https://crates.io/crates/may_actor"

, immutable data will be wrapped in "Arc", and we have direct access to it;
, mutable data will be wrapped in "Actor" and we can access it only through the actor itself;

async access: Rc
async access from multiple threads: Arc
async mutable access: Rc<RefCell>
async mutable access from mutiple threads: Actor

it's better to use "&mut" only for the receiver in methods;
and anywhere else use actors to control mutability;

static data (functions, structs, constants): no problem, copy or share by reference;
dynamic data:
, if data is small we usually put it on stack;
  so we don't share it across the program, we copy it;
, if data is big we put it on heap and make references to it;
  if data is immutable we just have to manage its lifetime,
    either statically (using "&"), or dynamically (using "Arc")
  but if data is mutable we have to check if the read_write_lock pattern is fulfilled,
    using "&mut" or "Actor";
  "Mutex" or "RwLock" check read_write_lock pattern at runtime,
    and make the program to panic, if it's failed;

in Rust any resource have exactly one owner which takes care of its resource deallocation;
owners can share their data by lending them to references;
references must have a lifetime less than the owner;
furthermore lifetime of a mutable reference must not overlap with other references;
"http://blog.skylight.io/rust-means-never-having-to-close-a-socket/"

owner can:
, access and mutate the resource;
, lend the resource to a reference;
, hand over ownership (move), or deallocate resource;
but during a lend, owner can't:
, mutate the resource;
, mutably lend resource to another reference;
, hand over ownership (move), or deallocate resource;
and during a mutable lend, owner can't even access the resource;

immutable (and thus sharable) references can:
, access borrowed resource;
, immutably lend resource to other references;
mutable (and thus exclusive) reference can:
, access and mutate resource;
, mutably lend resource to another reference;
, immutably lend resource, but during this lending, they can't mutate it;
  just like when an owner immutably lends its resource;

during shared borrow (immutable borrow) no one owns the data;
  so even the original owner can't change it;
during mutable borrow the (unique) borrower owns it;
so "&mut" is actually a temporary transfer of ownership;

s: String -> &s: &String -> &s[..]: &str
v: Vec<T> -> &v: &Vec<T> -> &v[..]: &[T]
&str and &[T] are slices; str and [T] are unsized types;
slicing is like borrowing from an unsized type;
since the slice contains the size, the lending type itself doesn't need to have a definite size;

x = a[i] -> this is possible if the elements of "a" are copy
  (cause moving out of collections is not possible);
x = &a[i] -> this is for the case when the elements are not copy;
x = a[i..j] -> this is always invalid;
x = &a[i..j] -> slicing;

auto ref/deref for self in method calls:
  compiler inserts as many * or & as necessary to get it right;
because in method calls name and context of a method call is almost always sufficient
  to infer the move/borrow semantics;

deref coercion:
, &T -> &U when T: Deref<Target=U>
, &mut T -> &U when T: Deref<Target=U>
, &mut T -> &mut U when T: DerefMut<Target=U>
examples:
  &&i32 -> &i32 because &i32: Deref<Target=i32>
  &String -> &str because String: Deref<Target=str>
  &Vec<T> -> &[T] because Vec<T>: Deref<Target=[T]>
  &Arc<T> -> &T because Arc<T>: Deref<Target=T>
"https://github.com/rust-lang/rfcs/blob/master/text/0241-deref-conversions.md"

= type system
types show us what we can do with the data, ie which operations are valid;

the class hierarchy design, like the one in Java, is problematic;
  "http://ptgmedia.pearsoncmg.com/images/020163371x/items/item33.html"
also the problem of covariance for generic types, has its root in this problem;
  "https://en.wikipedia.org/wiki/Wildcard_(Java)"
i think this problem is also the motivation for dynamic typing (another bad design);
the right way as done in Pony and Rust:
, concrete types (like final classes in Java) can be instantiated, but cannot have subtypes;
, abstract types (like abstract classes in Java) cannot be instantiated, but can have subtypes;

note that "x.m()" is method call syntax, which completely differs from "(x.m)()";

an absolute path starts from a crate root by using a crate name or a literal "crate";
a relative path starts from the current module and uses
  "self", "super", or the name of an item in the current module;
if an in_scope item has the same name as a crate, then we have to resolve the ambiguity:
, using a leading "::" for a crate name;
, using a leading "self::" for an in_scope item;

arrays like tuples have fixed size and thus stored on stack;
but since they are homogeneous (all elements are of the same type),
  they can be indexed at runtime;
vectors and hash tables are homogeneous, varying sized collections;

Rust does not have named arguments and named tuples; and it's a good thing;
when you need functions with lots of arguments, or tuples with lots of elements,
  it's a sign that you need to restructure your code, and use structs to define new types;

a closure is like an anonymous struct made of variables captured from environment,
  that is callable (implements Fn/FnMut/FnOnce trait);
so all closures are unique types, but they have traits in common;
note that if we put a generic type parameter in the return type of a function,
  we have to provide the concrete type when we call the function;
  thus we can't use generic type parameters to return a closure, we have to use "impl";

"fn(T1) -> T2" is not an unsized type like "str", it's a function pointer;

"https://crates.io/crates/serde"
"https://github.com/ron-rs/ron"

math:
"https://nalgebra.org/rustdoc/nalgebra/index.html"
"https://gitlab.com/ornamentist/un-algebra"
"https://github.com/rustsim/alga"

machine learning:
methods that their operation depends on adjustable fields;

install "rustup" and "gcc" then:
; rustup default stable
to update Rust:
; rustup update
