implementing a complete GUI toolkit is a huge lot of work;
existing ones (like GTK) are single threaded;
thus we can't access GTK widgets (and data structures containing them), from inside actors;
the solution:
"https://gtk-rs.org/docs/glib/source/fn.idle_add.html"
"https://docs.rs/fragile/1.0.0/fragile/struct.Fragile.html"
"https://docs.rs/send_wrapper/0.4.0/send_wrapper/"
we deal with Gobjects by wrapping them in a Gsend;
Gsend embeds a Fragile inside, which will be created in the GTK main thread (using "idle_add"),
  and then received (and put inside the Gsend) using a channel;
Gsend.new gets a closure (instead of a Gobject value);
  the closure's return type is the type of the specific Gobject;

Arc: immutable;
Actor: mutable;

"https://gtk-rs.org/docs/gtk/"
"https://gtk-rs.org/docs/sourceview/"
"https://mmstick.github.io/gtkrs-tutorials/introduction.html"
"https://github.com/gtk-rs/examples/tree/master/src/bin"
"https://slomo.pages.freedesktop.org/rustdocs/gstreamer/gstreamer/"
"https://gitlab.freedesktop.org/gstreamer/gstreamer-rs/tree/master/examples"
"https://gitlab.freedesktop.org/gstreamer/gstreamer-rs/tree/master/tutorials"
"https://github.com/fengalin/media-toc"

"https://stackoverflow.com/questions/23433819/creating-a-simple-file-browser-using-python-and-gtktreeview"
"http://zetcode.com/gui/pygtk/advancedwidgets/"
"https://github.com/MeanEYE/Sunflower"
"https://gitlab.gnome.org/GNOME/gnome-documents/-/tree/master/src"
"https://github.com/zim-desktop-wiki/zim-desktop-wiki"
"https://github.com/UberWriter/uberwriter"
"https://www.archlinux.org/packages/extra/any/meld/"
"https://github.com/karlch/vimiv"
"https://gitlab.gnome.org/GNOME/pitivi"
"https://www.archlinux.org/packages/community/any/quodlibet/"
"https://www.archlinux.org/packages/community/any/lollypop/"
"https://www.archlinux.org/packages/community/any/gaupol/"

; pkexec pacman -S gtksourceview4 webkit2gtk gst-plugins-{base,good,bad} gst-libav
poppler-glib goffice goocanvas

; cargo build --release
; cp .target/release/comshell /usr/local/bin/

; printf '[Desktop Entry]\nName=Comshell\nExec=comshell\nIcon=computer\nType=Application' >
  ~/.config/autostart/comshell.desktop
; pkexec cp ~/.config/autostart/comshell.desktop /etc/skel/.config/autostart/
; pkexec cp ~/.config/autostart/comshell.desktop /usr/local/share/applications/
