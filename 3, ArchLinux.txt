using Arch Linux we can easily setup and maintain a Linux system;
the following shows how to setup a basic graphical environment;

boot the Arch Linux live environment;
if you need to connect to a WIFI network:
; iwctl
  device list
  station <device> get-networks
  station <device> connect <SSID>

; curl https://damoonsaghian/Comshell/archive/master.tar.gz | tar -xz
; cd Comshell/ArchLinux
ensure that the files aren't malicious;

find the device you want to install ArchLinux on with "lsblk";
then run these (replace "sdx" with your device):
; sh install.sh sdx
; arch-chroot /mnt
; sh config.sh
; exit; reboot

".data/gnome-shell.png"

in the installed system, you can press "alt-space" to show the list of applications;
a terminal emulator is installed by default;
here you can power off, reboot, logout, suspend, or lock the system,
  from the applications list, just by typing those commands;
press "alt-esc" to close the focused window;
press "alt-tab" to switch between applications;
press "alt-a" or "alt-`" to switch between the windows of an application;
press "alt-shift-space" to toggle maximized state;

additional applications can be installed using "arc add package_name";
"arc" uses "pacman" and BTRFS snapshots to manage packages in such a way that
  changes to "/usr" and "/boot" would be atomic, and does not interfere with the running system;
as a result when you install an application, or update the system using "arc",
  the system must be restarted for it to take effect;
note that removing packages is done live (otherwise managing "/etc" would be complicated);
all of this means that we can have reliable automatic updates;

to connect to a WIFI network:
; nmcli dev wifi
; nmcli --ask dev wifi con <ssid>
to disconnect from a WIFI network:
; nmcli con down id <ssid>

you can set "user1" for automatic login:
; pkexec nano /etc/gdm/custom.conf
  [daemon]
  AutomaticLoginEnable=True
  AutomaticLogin=user1
but to protect the computer from physical attacks, you have to disable automatic login,
  and lock the session when you leave the computer;
in addition you have to:
, somehow prevent tampering with hardware;
, protect boot firmware by a password;
  which also prevents others to select another device (eg a usb drive) to boot;
these can make physical attacks more difficult, but keep in mind that
  physical access to a computer is root access, given enough time and resources;

if your combined headset jack is not detected correctly, you can try this:
; pkexec echo 'options snd_hda_intel index=0 model=dell-headset-multi' > /etc/modprobe.d/alsa-base.conf
"https://wiki.archlinux.org/index.php/Advanced_Linux_Sound_Architecture#Correctly_detect_microphone_plugged_in_a_4-pin_3.5mm_(TRRS)_jack"
this made the microphone available, but with a very bad static noise;
so maybe it's better to use a USB/Bluetooth sound card;

= system administration
in system administration we must ensure that:
1, the command executed is explicitly given by the user;
2, even if a program steals the root password, it still can't change the system;

"sudo" fails in both cases;
"https://www.reddit.com/r/linuxquestions/comments/8mlil7/whats_the_point_of_the_sudo_password_prompt_if/"

"pkexec" is safer, but since the Polkit agent doesn't show command arguments, it can be vulnerable too;
further more, "pkexec" fails in the second case;
  a fake Polkit agent can be used to send the stolen password to Polkit;
and since Polkit admin is installed and active by default,
  we have to disable it to protect the system (after we have a secure alternative):
; mkdir -p /etc/polkit-1/rules.d
; echo 'polkit.addAdminRule(function(action, subject) { return []; });' >
  /etc/polkit-1/rules.d/49-rootpw_global.rules

"su" fails in the second case too;
so we have to disable root login (after we have a secure alternative):
; passwd -l root

the solution is a program which opens a Wayland window with a command prompt;
if you have given your command as arguments to the program,
  the prompt shows that command, as default input;
after pressing "return", it asks for root password;
