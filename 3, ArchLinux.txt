using Arch Linux we can easily setup and maintain a Linux system;
the following shows how to setup a basic graphical environment, using GnomeShell;
in the installed system you can press "alt-space" to show the list of applications;
there you can also do power_off/restart, logout, suspend, and lock, by typing them;
press "alt-shift-space" to toggle maximized state of the window;
press "alt-esc" to close the window;

boot Arch Linux live environment;
to ensure the system clock is accurate:
; timedatectl set-ntp true
if you need to connect to a WIFI network:
; iwctl
  device list
  station <device> get-networks
  station <device> connect <SSID>

list available block devices using "lsblk", then on the intended block device,
  create the needed partitions, and finally format and mount them:
; printf "label: gpt\n,260MiB,U,*\n;" | sfdisk /dev/<device>
; mkfs.fat -F32 /dev/<partition1>; mkfs.btrfs /dev/<partition2>
; mount /dev/<partition2> /mnt
; mkdir -p /mnt/boot/efi
; mount /dev/<partition1> /mnt/boot/efi
; mkdir /mnt/etc
; genfstab -U /mnt >> /mnt/etc/fstab

;sh
pacstrap /mnt base
arch-chroot /mnt
curl --proto '=https' -sSf -o comshell.zip https://github.com/damoonsaghian/Comshell/archive/master.zip
pacman -S unzip
unzip comshell.zip -d Comshell
;
ensure the downloaded files aren't malicious, then:
; cd Comshell/ArchLinux
; sh install.sh
; exit; reboot

to connect to a WIFI network:
; nmcli dev wifi
; nmcli --ask dev wifi con <ssid>
to disconnect from a WIFI network:
; nmcli con down id <ssid>

you can set "user1" for automatic login:
; pkexec nano /etc/lightdm/lightdm.conf.d/50-myconfig.conf
  autologin-user=user1
; pkexec groupadd -r autologin
; pkexec gpasswd -a user1 autologin
but to protect the computer from physical attacks, you have to disable automatic login,
  and lock the session when you leave the computer;
in addition you have to:
, somehow prevent tampering with hardware;
, disable boot from USB (and other external ports);
, protect boot firmware by a password;
these can make physical attacks more difficult, but keep in mind that
  physical access to a computer is root access, given enough time and resources;

note that due to a bug, "pkexec" does not work with the fallback Polkit agent,
  which is the only one available, in Linux console (ie when GnomeShell is not running);
there is a workaround though (it requires "ctrl+c" to stop):
; pkttyagent -p $(echo $$) | pkexec ...
or you can just use "su" instead;

now we can even have a prototype of Comshell;
it's basically Atom editor's code, trimmed down and made to run inside NW.js;
why Nw.js instead of Electron.js:
1, multiple NW.js instances spend less resources, cause as opposed to Electron.js,
  the libraries are not embedded inside the executable;
2, NW.js always uses the latest versions of Node.js and Chromium;

;sh
pkexec pacman -S npm gcc make
cd Comshell/ArchLinux/comshell-proto
npm install
pkexec cp -r ../comshell-proto /usr/local/share/comshell-proto/

printf '[Desktop Entry]\nName=Comshell proto\nExec=/usr/local/share/comshell-proto/node_modules/.bin/nw --mixed-context /usr/local/share/comshell-proto/ \nIcon=computer\nType=Application' > ~/.config/autostart/comshell.desktop
pkexec cp ~/.config/autostart/comshell.desktop /etc/skel/.config/autostart/
pkexec cp ~/.config/autostart/comshell.desktop /usr/local/share/applications/comshell-proto.desktop
;
