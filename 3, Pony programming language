the problem with concurrency is sharing mutable data;
ie having a mutable reference to some data, while it is shared using other references,
to prevent sharing mutable data we must control aliasing;
two languages which do that are Rust and Pony;

Rust does that by moving data (as default), and temporary borrows;
lifetime of borrows must be checked:
, if done statically, it may need complicated lifetimes;
, if done dynamically, there can be runtime errors;
Rust has other problems as well:
, "Copy" types are special, they don't move;
, other complexities like str/String;
but the main reason that i prefer Pony over Rust is that in Rust we can't have field mutability;
  ie in Rust we can't mutate individual fields while the whole object is immutable;

Pony is a really well designed programming language;
"https://www.ponylang.io/"

actors can contain parameters which can be adjusted gradually, based on received messages;
  this can be used to implement learning capabilities;
