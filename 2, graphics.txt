scene'graph based graphics
objects in the scene'graph can be created directly using a library a'p'i, or created in a textual format and then sent to an engine which creates the actual objects.
since there is no sophisticated scene'graph based graphics library for Rust yet, and since writing bindings for existing c/c++ libraries which all have run'time memory management, and class based inheritence, generally ruin Rust's (elegant) ownership system, and traits, i think the engine approach is easier, at least for now.

QtQuick
"http://doc.qt.io/qt-5/qtqml-javascript-dynamicobjectcreation.html"
"http://doc.qt.io/qt-5/qtqml-cppintegration-contextproperties.html"
"https://developer.ubuntu.com/api/qml/sdk-14.10/QtQml.qtqml-cppintegration-interactqmlfromcpp/"
"https://www.wisol.ch/w/articles/2014-12-15-qt-signal-slots-qml-cpp/"

"https://white-oak.github.io/qml-rust/qml/"
"https://github.com/White-Oak/qml-rust/tree/master/examples"

a small script, inside QML engine, receives textual input (which is set using QmlEngine::set_property), and then creates and manipulates graphical objects, based on the currently selected object.

script in the engine:
  current object
  Qt.createQmlObject()
the textual input is given to the engine using:
  QmlEngine::set_property(name, value)
"value" is a string containing the QML description of the data to be added, and the transformation.

last object: loaded objects from file are added after the last object.
selected object: manipulated by user.
input message:
, a new object or none (meaning the selected object)
, transfomation

to install Rust and Qt on windows, use msvc versions.
after installing Qt on Windows:
  set QTDIR environment variable to point the path where Qt lib directory is installed.
  add Qt bin directory to PATH.
