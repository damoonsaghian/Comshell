software rendering gives us a lot more flexibility, since we are not any more limited by a hardware implementation with triangle only rasterization, isolated shader programs, and fixed size buffers.

font-rs
"https://github.com/google/font-rs"
"https://docs.rs/rusterize/"
"https://docs.rs/softrender/"
"https://crates.io/crates/line_drawing"
"https://www.siggraph.org/education/materials/HyperGraph/scanline/outprims/drawline.htm"
"https://en.wikipedia.org/wiki/Bresenham's_line_algorithm"
"https://en.wikipedia.org/wiki/Midpoint_circle_algorithm"
"https://en.wikipedia.org/wiki/Xiaolin_Wu%27s_line_algorithm"
"http://members.chello.at/~easyfilter/bresenham.html"
"https://nothings.org/gamedev/rasterize/"

graphical objects are made of primitives. primitives are defined using a set of
parameters. each primitive has a specific algorithm for rasterization.
2d primitives: point, line, curve, triangle, curved area.
3d objects made of flat surfaces will be broken up into triangles.
3d objects made of curved surfaces can be broken up into a number of primitive 3d surfaces which can be easily projected to 2d.
"https://en.wikipedia.org/wiki/Quadric"
also interpolation is a good method for amorphous surfaces.

2d objects will be rasterized to pixels (i'e a coordinate and a color value).
then these rasterized objects will be drawn in the framebuffer, in layers over each other (in an overlay on top of all 3d objects).
rasterizing 3d objects, produces an array of fragments. a fragment other than color, contains a normal and a depth.
when creating the pixels of the framebuffer from the fragments, the normals are used for lighting, and the depths are used for z'buffer.

"https://en.wikipedia.org/wiki/Stencil_buffer"
"https://www.scratchapixel.com"
"https://www.scratchapixel.com/lessons/3d-basic-rendering/phong-shader-BRDF"

graphical objects are of 2 kinds:
, those which we know will remain unchanged the next time we want to draw to the framebuffer. these objects are first rasterized into memory, then we copy it to framebuffer.
, those which we know will be changed (scaled, rotated, moved in z direction) the next time we want to draw to the framebuffer (which happens a lot for animations with high frame rate). these objects will be drawn directly to the framebuffer.
(framebuffer uses double buffering and v'sync)
note that if an object just moves in x'y plane (without rotation), the cached rasterization is still useful. for 2d objects we simply add a constant to the position of all pixels. for 3d objects we may additionally want to recompute the lighting of pixels form fragments.

graphical objects:
, primitives
, material
, cached rasterization (can be none)

graphical objects can be put in a layout tree. transformations on objects will be applied in groups, based on the tree.
objects are moved to the tree. they can be accessed only by their index. it means that, unlike in a scene'graph, pointers to objects in the tree are not accessible by the user. they are accessed only using tree indexing. so there are no free pointers, and no need for run'time memory management.

we define transformation functions which trasnform states.
transformation :: State -> State
                  --------
transformation-->|        |
                 |        |----> state
               ->|        |  |
              |   --------   |
               --------------