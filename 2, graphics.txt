scene'graph based graphics system
objects can be built inside or outside of the graphics system.
outside -> graphics library
inside -> graphics engine
since there is no sophisticated scene'graph graphics library for Rust yat, and since writing bindings do not map well with Rust's (elegant) ownership system, and traits (instead of run'time memory management, and using classes, in existing libs written in c/c++), i thing the engine approach is better, at least for now.

QtQuick
"https://white-oak.github.io/qml-rust/qml/"
https://github.com/White-Oak/qml-rust/tree/master/src
https://white-oak.github.io/qml-rust/qml/
http://doc.qt.io/
http://doc.qt.io/qt-5/qtmodules.html
http://doc.qt.io/qt-5/qtqml-index.html

http://doc.qt.io/qt-5/qtqml-javascript-dynamicobjectcreation.html
https://developer.ubuntu.com/api/qml/sdk-14.10/QtQml.qtqml-cppintegration-interactqmlfromcpp/
https://www.wisol.ch/w/articles/2014-12-15-qt-signal-slots-qml-cpp/
http://doc.qt.io/qt-5/qtqml-cppintegration-contextproperties.html


there is a small script that runs inside QML engine. it receives textual input (which is set using QmlEngine::set_property), and then creates and manipulates graphical objects, based on the currently selected object.

script in the engine:
  current object
  Qt.createQmlObject()
the textual input is given to the engine using:
  QmlEngine::set_property(name, value)
"value" is a string containing the QML description of the data to be added, and the transformation.

last object: loaded objects from file are added after the last object.
selected object: manipulated by user.
input message:
  a new object or none (meaning the selected object)
  transfomation

to install Rust and Qt on windows, use msvc versions.
after installing Qt on Windows:
  set QTDIR environment variable to point the path where Qt lib directory is installed.
  add Qt bin directory to PATH.
