, retained mode graphics libraries (like GTK, or more advanced scene'graph based libraries, like Clutter, and most game engines) tend to extensively use class hierarchies, and run'time memory managment. so by using them we lose the real benefits of programming in Rust.
, immediate mode graphics libraries (like Piston2d-graphics, NanoVG, Nuklear, Raylib, ImGUI) are simpler to design and thus usually don't need those complexities. but they are implemented in such a way that every time there is a change, all graphical objects must be recreated, because graphical objects are not retained. this is obviously inefficient.

in retained mode we send all the geometry to the graphics card once, then, submit draw calls to render what is already there in v'r'a'm.

in immediate mode, the u'i is just a function of the current application state, thus the application is not responsible for explicitly managing the u'i state and keeping it synced with app. so it seems to be the simpler approach.
but in fact, retained mode graphics is the right approach. the reason for the complexities usually associated with it is because of the imperative programming.
interestingly imperative programming is also the root of complexities associated with life'times in Rust. in functional reactive programming, move semantic is actually a necessity, and there is no need to deal with life'times.

rust-sfml is special:
, we can create retained graphical objects, which can be rotated, scaled, moved, etc.
, but unlike sophisticated retained mode libs, there is no class hierarchies, and no ref counting.

maybe Vulkan is  more flexible than OpneGL, but then again why ever bother with a hardware a'p'i.

software rendering gives us a lot more flexibility, since we are not any more limited by a hardware implementation with fixed size buffers, and isolated shader programs.
softrender "https://docs.rs/softrender/"
rusterize "https://docs.rs/rusterize/"
font-rs "https://github.com/google/font-rs"

graphical objects:
, points
, connectors
, fragments
, are fragments synced with points and connectors

using the fragments, graphical objects are drawn the 2d output framebuffer (which uses double buffers and v'sync).

create graphical objects.
put them in a tree.
transformations on objects will be applied in groups, based on the tree.
current object index
note that unlike a scene'graph, pointers to objects which are held in the tree, are not accessable by the user. they are accessed only using tree indexing. so there are no free pointers, and no need for run'time memory management.

the data stream sent to the graphics function contains:
1, the new object to be added beside the currently selected object. (can be none)
2, the transformation which must be applied to this new object (in which case, the transformation can be none), or to the selected object (if there is no new object).
3, the index, or the relative motion of the index of currently selected object in the tree.

so here it is. we can finally implement an efficient functional reactive g'u'i.
