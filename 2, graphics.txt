scene'graph based graphics
objects in the scene'graph can be created directly using a library a'p'i, or created in a textual format and then sent to an engine which creates the actual objects.
since there is no sophisticated scene'graph based graphics library for Rust yet, and since writing bindings for existing c/c++ libraries which all have run'time memory management, and class based inheritence, generally ruin Rust's (elegant) ownership system, and traits, i think the engine approach is easier, at least for now.
of course we loose etype safty, and it may be slower, but when there is a sophisticated scene'graph graphics library in Rust, we can imidiately use it using a serializer/deserializer, and gradually migrate from the textual interface, to using the direct graphics a'p'i.

CEF (Chromium embedded framework) is complicated (as a result of supporting all web technologies, multiple processes, ...). i think in general html+css is not designed for generic graphics use cases.

QtQuick has a good modular implementation for almost all platforms. also there is a Rust binding for QML engine.
"http://doc.qt.io/qt-5/qtqml-javascript-dynamicobjectcreation.html"
"http://doc.qt.io/qt-5/qtqml-cppintegration-contextproperties.html"
"https://developer.ubuntu.com/api/qml/sdk-14.10/QtQml.qtqml-cppintegration-interactqmlfromcpp/"
"https://www.wisol.ch/w/articles/2014-12-15-qt-signal-slots-qml-cpp/"

"https://white-oak.github.io/qml-rust/qml/"
"https://github.com/White-Oak/qml-rust/tree/master/examples"

(don't use id property, and data bindings in QML)

a small script, inside QML engine, receives textual input (which is set using QmlEngine::set_property), and then creates and manipulates graphical objects, based on the currently selected object.

script in the engine:
  current object
  Qt.createQmlObject()
the textual input is given to the engine using:
  QmlEngine::set_property(name, value)
"value" is a string containing the QML description of the data to be added, and the transformation.

last object: loaded objects from file are added after the last object.
selected object: manipulated by user.
input message:
, a new object or none (meaning the selected object)
, transfomation

to install Rust and Qt on windows, use msvc versions.
after installing Qt on Windows:
  set QTDIR environment variable to point the path where Qt lib directory is installed.
  add Qt bin directory to PATH.

QtWebengine can be used to view websites, pdf files (pdf.js), and even video.
