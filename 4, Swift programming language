the problem with concurrency is sharing mutable data;
ie having a mutable reference to some data, while it is shared using other references,
to prevent sharing mutable data, we can:
, abandon mutability like in Haskell; but since mutability is necessary in some cases,
  a complicated mechanism (Monads) is implemented;
, abandon aliasing like in Rust, and copy, move, or borrow instead;
  actually this also allows Rust to eliminate the need for garbage collection;
  but since aliasing is needed in some cases (asynchronous calls),
    we have to reintroduce aliasing again, adding more complexities;

the absence of garbage collection in Rust may seem interesting at first;
but in fact those situations which can be borrow checked statically,
  without the need for complicated lifetimes,
  can be detected by the compiler without concerning the programmer;
Rust has other complexities too, like str/String;
but one serious problem in the design of Rust is that in Rust we can't have field mutability;
  ie in Rust we can't reassign to individual fields when the variable is not reassignable;

= Pony
another approach to deal with mutable data shared concurrently, is the one used in Pony;
"https://www.ponylang.io/"
it doesn't abandon aliasing nor mutability;
instead it controls them using reference capabilities;

                  |        RW         |          R        |        ...        |
-------------------------------------------------------------------------------
local alias: ...  |        iso        |         ...       |        ...        |
-------------------------------------------------------------------------------
local alias: R    |        trn        |         val       |        ...        |
-------------------------------------------------------------------------------
local alias: RW   |        ref        |         box       |        tag        |
-------------------------------------------------------------------------------
                  | global alias: ... |  global alias: R  | global alias: RW  |

the first column allows mutability, cause other actors can't write;
the second column needs immutability, cause other actors can read;
the last column is opaque (no read/write is allowed), cause other actors can read or write;

= Swift
Pony's approach introduces many complexities;
so i think it's better to choose a well designed language like Swift, and add these to it:
, actor: can receive messages
, iso: can be moved
, const: immutable data

"https://swift.org/"
"https://gist.github.com/lattner/31ed37682ef1576b16bca1432ea9f782"

"https://github.com/apple/swift-numerics"
"https://github.com/tensorflow/swift"
"https://github.com/Jounce/Surge"

= type system
types show us what we can do with the data, ie which operations are valid;
the class hierarchy design, like the one in Java, is problematic;
  "http://ptgmedia.pearsoncmg.com/images/020163371x/items/item33.html"
also the problem of covariance for generic types, has its root in this problem;
  "https://en.wikipedia.org/wiki/Wildcard_(Java)"
i think this problem is also the motivation for dynamic typing (another bad design);
the right way as done in Rust, Pony and Swift:
, concrete types (like final classes in Java) can be instantiated, but cannot have subtypes;
, abstract types (like abstract classes in Java) cannot be instantiated, but can have subtypes;

using actors we can get rid of a global event loop;

actors can contain parameters which can be adjusted gradually, based on received messages;
  this can be used to implement learning capabilities;
