the basic problem with concurrent programming is sharing mutable data;
ie having a mutable reference to some data, while it is shared using other references;
to prevent sharing mutable data, we can abandon mutability like in Haskell;
  but since mutability is necessary any way, a complicated mechanism (Monads) must be created;

an approach to deal with mutable data shared concurrently, is the one used in Pony;
"https://www.ponylang.io/"
it doesn't abandon aliasing nor mutability;
instead it controls them using reference capabilities;

                  |        RW         |          R        |        ...        |
-------------------------------------------------------------------------------
local alias: ...  |        iso        |         ...       |        ...        |
-------------------------------------------------------------------------------
local alias: R    |        trn        |         val       |        ...        |
-------------------------------------------------------------------------------
local alias: RW   |        ref        |         box       |        tag        |
-------------------------------------------------------------------------------
                  | global alias: ... |  global alias: R  | global alias: RW  |

the first column allows mutability, cause other actors can't write;
the second column needs immutability, cause other actors can read;
the last column is opaque (no read/write is allowed), cause other actors can read or write;
Pony's approach introduces many complexities, especially when dealing with generics;

a better approach is done by Rust;
this approach even allows Rust to limit the need for garbage collection,
  only for asynchronous calls;

, immutable data: direct access to it, sendable;
, mutable data: either direct access and not sendable, or no direct access and sendable;

= type system
types show us what we can do with the data, ie which operations are valid;
the class hierarchy design, like the one in Java, is problematic;
  "http://ptgmedia.pearsoncmg.com/images/020163371x/items/item33.html"
also the problem of covariance for generic types, has its root in this problem;
  "https://en.wikipedia.org/wiki/Wildcard_(Java)"
i think this problem is also the motivation for dynamic typing (another bad design);
the right way as done in Pony and Rust:
, concrete types (like final classes in Java) can be instantiated, but cannot have subtypes;
, abstract types (like abstract classes in Java) cannot be instantiated, but can have subtypes;

actors can contain parameters which can be adjusted gradually, based on received messages;
  this can be used to implement learning capabilities;
