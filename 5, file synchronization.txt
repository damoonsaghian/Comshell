the problem of shared mutable data is so pervasive in the computing world;
we can also see it in file synchronization tools like Git:
, there can be conflicts when pushing or pulling, that must be resolved manually;
, the history just grows indefinitely cause change in the history of the repository can be catastrophic;

solution:
only the owner can mutate the repository;
each file or directory can have an owner;
owner can mutably borrow its content for a defined duration, or move ownership;
others have to send messages:
, in the form of to_dos define by the owner;
, corrections

immutable repositories can apply corrections and to_dos, and test them,
  but they can't push it to remote, only the owner can;
automatic sync at the immutable ends;
sync before sending to_dos or corrections;

a WebDAVS or FTPS server for remote storage;

Duplicacy: consistent, lockless and simple repository
WebDAV backend is still in beta;
"https://github.com/gilbertchen/duplicacy"
"https://github.com/gilbertchen/duplicacy/wiki"
"https://github.com/gilbertchen/duplicacy/wiki/Chunk-Size"
"https://github.com/gilbertchen/duplicacy/wiki/Managing-Passwords"
"https://github.com/gilbertchen/duplicacy/wiki/Lock-Free-Deduplication"
"https://github.com/gilbertchen/duplicacy/wiki/Snapshot-Format"

because of the License of Duplicacy it would be great to make something similar to it in Rust:
"https://github.com/oll3/bita"
"https://github.com/sourcefrog/conserve"
"https://github.com/dpc/rdedup"

Restic:
, needs to enter repository every time;
, can't disable encryption;
, locks repository when mutating;
, prune is very slow and it locks repository;
, high CPU and memory usage;
