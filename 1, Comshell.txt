= command based user interface
command based user interfaces (using keyboard, voice, gesture) are
  faster, more convenient and more powerful,
  than pointer based user interfaces (using mouse, touch, pen)
pointer based interface seems appealing at first sight, because of its discoverability;
but with simple uniform GUI (ie the oposite of what we see in websites),
  there is no need for a pointer based user interface;

touch interface has an additional problem: interaction at a distance is not possible;
but it can still be useful in simple or special applications;

detection of voice commands is a relatively simple process (compared to general speech recognition),
  because we only need to match against a relatively small set of commands;
a headset with near range microphone can be used, to exclude far away sound sources;
also it is better to put battery and transmitter of the headset in a separate unit,
  that can be put in the pocket;
  this makes the headset lighter and safer;

for those who neither can use all their fingers, nor can talk,
  gesture based (2d) input can be implemented;

".data/keyboard.png"
, two commas -> ;
, ";" followed by comma -> .
, comma followed by "(" -> {
, ";" followed by "(" -> [
, comma followed by "c" followed by space -> : (followed by one space)
, comma followed by "psi" followed by comma -> Ïˆ
, "_ab_c" then two underscores -> AbC (followed by one space)
, "__ab_c" then two underscores -> __ab_c__
"https://github.com/adereth/dactyl-keyboard"
Kinesis Advantage 2 keyboard
"http://www.allthingsergo.com/the-best-ergonomic-mechanical-keyboards/"

for compatibility with other applications, we still need a touchpad and extra keys:
, arrow keys, "page up", "page down", "home", "end":
  which can be implemented as gestures on the touchpad;
, "alt", "ctrl", "shift", "tab": which can be put in the middle;
, 10 punctuation keys which can be put above numbers;

= Comshell
Comshell is a unified computing environment, utilizing command based user interface;

project directories reside in directories named "projects" or "projects.*",
  inside home directory or mounted disks;
list of all projects will appear in a floating layer, at the center of screen;
each group of projects (which are in the same directory) will be shown in separate tabs;

in a project view, list of files will be displayed in the left side_bar;
files and directories with names starting with a dot, will be hidden;
".cache" directory inside a project is for files we don't want to share or backup;

text files will be opened in a text editor;
directories with ".g" suffixes, will be opened in a gallery view;
files and directories inside galleries, will be opened in a floating layer;

we can have views of different locations in a project (even of the same file);
opened files are indicated by a line below them;
multiple views of a file are indicated by sections in this line;

non_local projects, web pages, PDF documents, etc,
  accessed from links inside the main project, will be opened in a floating layer;
web pages:
, move caret between visual objects (ignoring structural objects);
, or use hinting for text input and other widgets, text and other elements like images and videos;

modal key_bindings;
modes (normal mode and insert mode) must be visually distinctive;
press "esc" or "tab" to go to normal mode;
in normal mode we can:
, press "space" to go to insert mode;
, move the cursor to the next or previous word;
, move the cursor to the next or previous lines or table cells;
, move the cursor to the next or previous paragraph;
, start and end selection, then copy or cut;
, paste
, undo
, find

, navigation: move, search
, selection
, completion

double space:
, at the beginning of line: indent
, otherwise: complete (auto_completion does not disappear with only one space)
