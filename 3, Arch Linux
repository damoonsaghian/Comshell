using Arch Linux we can easily setup and maintain a Linux system;
the following shows how to setup a basic graphical environment, using GnomeShell,
  with Atom editor and Chromium browser (each in their own workspace),
  which you can toggle in between with "alt-tab";
"alt-space" opens a terminal;
pressing "alt-tab" closes the terminal, but if the command is still running,
  it will be visible as an icon in the notification area,
  and you can bring it back by pressing "alt-space" repeatedly;
"alt-`" shows available (graphical) applications, and opens them in their own workspaces;
"alt-tab" brings you back to the workspace containing Atom editor;

boot Arch Linux live environment;
to ensure the system clock is accurate:
; timedatectl set-ntp true
if you need to connect to a WIFI network:
; iwctl
  device list
  station <device> get-networks
  station <device> connect <SSID>

list available block devices using "lsblk", then on the intended block device,
  create the needed partitions, and finally format and mount them:
; printf "label: gpt\n,260MiB,U,*\n;" | sfdisk /dev/<device>
; mkfs.fat -F32 /dev/<partition1>; mkfs.btrfs /dev/<partition2>
; mount /dev/<partition2> /mnt
; mkdir -p /mnt/boot/efi
; mount /dev/<partition1> /mnt/boot/efi
; mkdir /mnt/etc
; genfstab -U /mnt >> /mnt/etc/fstab

; pacstrap /mnt base
; arch-chroot /mnt
; export url=https://raw.githubusercontent.com/damoonsaghian/Comshell/master/etc/
; curl --proto '=https' -sSf -o #1 "$url"{arch-install.sh,extension.js,gtk.css}
study the downloaded files, and then:
; sh arch-install.sh
; exit; reboot

after booting into the installed Arch Linux, press "Alt+space" to open a terminal;

to connect to a WIFI network:
; nmcli dev wifi
; nmcli --ask dev wifi con <ssid>
to disconnect from a WIFI network:
; nmcli con down id <ssid>
to disable WIFI:
; nmcli radio wifi off

; pkexec pacman -S xorg-server-xwayland atom chromium aria2 moc mpv

in Chromium settings:
, enable "use system title bar and borders";
, enable "continue where you left off";
, disable "continue running background apps when Chromium is closed";

; cp etc/atom/* ~/.atom/
; mkdir -p ~/.config/autostart
; cp /usr/share/applications/atom.desktop ~/.config/autostart/

you can set "user1" for automatic login:
; nano /etc/lightdm/lightdm.conf.d/50-myconfig.conf
  autologin-user=user1
; groupadd -r autologin
; gpasswd -a user1 autologin
and disable lock on suspend and after screensaver:
; gsettings set apps.light-locker lock-on-suspend false
; gsettings set apps.light-locker lock-after-screensaver 0
but to protect the computer from physical attacks, you have to disable automatic login,
  and lock the session when you leave the computer;
in addition you have to:
, somehow prevent tampering with hardware;
, disable boot from USB (and other external ports);
, protect boot firmware by a password;
these can make physical attacks more difficult, but keep in mind that
  physical access to a computer is root access, given enough time and resources;

note that due to a bug, "pkexec" does not work with the fallback Polkit agent,
  which is the only one available, in Linux console (ie when GnomeShell is not running);
there is a workaround though (it requires "ctrl+c" to stop):
; pkttyagent -p $(echo $$) | pkexec ...
or you can just use "su" instead;
