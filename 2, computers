= asynchronous digital circuits
in conventional digital circuits when the inputs change,
  the outputs can have temporary invalid values, until they stabilize to the valid values;
but for the circuit to do its job,
  gates with memory (registers) must operate only when the inputs have correct values;
one solution is to synchronize registers with a global clock signal;
  the period of clock signal is made long enough for the circuit to become stable;

disadvantages of synchronous circuits:
, we have to split long operations into several smaller ones,
  which can be performed in successive clock cycles (a technique known as pipelining);
  otherwise the circuit would be slow and inefficient;
, distributing a high-fan-out, timing-sensitive clock signal can be complicated;
, electromagnetic interference at the clock frequency and its harmonics;
, widely distributed clock signal takes a lot of power,
  and must run whether the circuit is receiving inputs or not;
although "clock gating" can help to reduce some of the problems of synchronous circuits,
 i think the real solution is to use asynchronous circuits;

the only sane kind of asynchronous circuit which i could imagine is this:
, next to any data wire there is a control wire which determines if the data is valid or not;
, when a register wants to change its outputs, it first invalidates them,
  for a duration equal to the delay of one gate;
, any gate receiving an invalid input, invalidates its outputs;
, this way all data which is going to change in the future, is first invalidated;
, registers operate only when all inputs are valid;

= computers
cpu, memory, peripherals,
  this seems to be the only practical architecture for the hardware of computers;
cpu runs a sequence of simple computations, called instruction codes, one by one;

compilers are special programs that generate instruction codes,
  from a program written in a structured and human readable language;

there is always possibility of backdoors for closed source CPU,
  especially if the boot firmware is also closed source;
recently introduction of "secure execution environment" makes this situation even worse;
since for implementing it some vendors, like Intel and AMD,
  expand their closed source firmware, to a full_blown always_running mini operating system,
  with full access to the whole system (including memory and network);
furthermore they make it practically impossible for users to disable it;
this mess of a design cries out for hidden and quite sophisticated backdoors;
"https://www.fsf.org/blogs/licensing/intel-me-and-why-we-should-get-rid-of-me"
"https://libreboot.org/faq.html#intel"
"https://en.wikipedia.org/wiki/Intel_Management_Engine"
"https://blog.invisiblethings.org/papers/2015/x86_harmful.pdf"

so what are the alternatives:
RISC-V: no appropriate hardware available yet;
PowerPc: no appropriate hardware available yet;
MIPS: bad old design (relative to other alternatives, not X86),
  no appropriate hardware available yet;
ARM: closed source, but with much better design than X86,
  and can have open source firmware (like EDK2 which is an open source UEFI implementation),
  but so far i couldn't find an appropriate hardware;
  a decent hardware based on Qualcomm/Adreno would be pretty good;
an ideal system would have powerful enough CPU, and a GPU with open source driver,
  8GB DDR4, and EDK2 boot firmware;

programs usually do not run directly on computer hardware;
instead they run on a more sophisticated software machine (a virtual machine) called the kernel;
in theory we can live without a kernel (an idea sometimes called a library operating system);
but in that case, we have to rewrite all the required libraries, on bare metal;
anyway, having an operating system, makes developing and testing new programs much easier;

Linux is a highly developed, constantly evolving, open_source kernel;
in Linux (and other Unix based operating systems) most things appear in the file system;
i think the reason is to make it possible to do lots of things using shell scripts,
  instead of a proper programming language;
while i can understand the convenience it provides, i don't think it's good design;
