Arch Linux provides a binary/shared library distribution system, which is simple and effective, and is very close to the original build process.

boot to an existing Arch Linux (the live image, or an already installed Arch Linux with arch-install-scripts package installed) then:
$ timedatectl set-ntp true
prepare the disk (use lsblk to identify the block devices), and mount it:
  $ mkfs.btrfs -f /dev/sdx
  # you will need the UUID given here
  $ mount /dev/sdx /mnt
  btrfs is used because journaling file systems can only protect metadata, at an acceptable performance. since they need to write all file system operations twice, once to the journal, and once to the file system.
  copy_on_write provides consistency for both data and metadata.
  also, it can offer integrity of data and metadata (using checksums), at an acceptable overhead.
  in addition, COW also supports the creation of cheap snapshots and clones (because it does not overwrite data in place). users can take fast online backups without the need to use any special software technique like LVM.
you can even copy the cache of downloaded packages in your running Arch Linux system to /mnt/var/cache/pacman/pkg to save bandwidth.
$ pacstrap /mnt pacman
$ arch-chroot /mnt
$ pacman -S syslinux intel-ucode linux systemd-sysvcompat btrfs-progs nano man-db logrotate networkmanager sudo

bootloader:
  $ extlinux --install /boot/syslinux
  $ nano /boot/syslinux/syslinux.cfg
    POMPT 0
    DEFAULT arch
    
    LABEL arch
        LINUX ../vmlinuz-linux
        APPEND root=UUID=... rw
        INITRD ../intel-ucode.img,../initramfs-linux.img
    LABEL archfallback
        LINUX ../vmlinuz-linux
        APPEND root=UUID=... rw
        INITRD ../intel-ucode.img,../initramfs-linux-fallback.img
$ systemctl enable NetworkManager.service
create user:
  $ useradd -m -G wheel user1
  $ passwd -d user1
  $ EDITOR=nano visudo
    %wheel ALL=(ALL) ALL
$ mkdir /etc/systemd/system/getty@tty1.service.d
$ nano /etc/systemd/system/getty@tty1.service.d/override.conf
  [Service]
  ExecStart=
  ExecStart=-/usr/bin/agetty --autologin user1 --noclear %I $TERM
$ systemctl enable systemd-timesyncd.service
$ exit; reboot

$ sudo pacman -S udisks2 alsa-utils noto-fonts ttf-hack arc-gtk-theme xorg-server xf86-video-{intel,nouveau,amdgpu} xorg-xinit gtk3 gtksourceview3 vte3 gst-libav webkit2gtk rustup
$ sudo amixer sset Master unmute

$ mkdir -p ~/.config/gtk-3.0
$ nano ~/.config/gtk-3.0/settings.ini
  [Settings]
  gtk-theme-name = Arc
  gtk-font-name = Noto Sans

$ nano ~/.bashrc
  startx
$ nano ~/.xinitrc
  # exec cargo run --release --manifest-path ~/projects/Comshell/Cargo.toml
