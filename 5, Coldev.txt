collaborative development

we will have three BTRFS snapshots:
".cache/sync/pristine"
".cache/sync/indexed"
".cache/sync/remote"

index file:
".cache/sync/index"
entries are separated with empty lines;
each entry has 3 lines:
1, path
2, modification time
3, hash

push:
, lock remote
, pull, and if something must be done, unlock and exit;
, snapshot working directory into ;
, flatten the paths of all files in ".cache/sync/indexed" using their hashes for the file names;
  if the file's modification time is the same as the one in the index file,
  take the hash from the index file, otherwise calculate the hash;
, create the index file, inside ".cache/sync/indexed";
, sync up ".cache/sync/indexed", using LFTP;
, delete the snapshot;

pull:
, sync down ".cache/sync/indexed", snapshot it into ".cache/sync/remote", and rename file;
, show the diff based on the working directory, pristine and remote;

, move the index file to ".cache/sync/index" (inside the snapshot);
, rename the files in the snapshot to the paths mentioned in the index file;
, move the snapshot to the working directory;

backup:

SFTP:
, create a user with a temporary password;
, login, then disable multi login;
, reset ssh;
, login;
, make a homepage;
, put the fingerprint in "ssh_fingerprint.txt";
, change password;
, logout
, each time before login download the ssh key fingerprint, and append it to "~/.ssh/known_hosts";

messages are attached to tags which are placed in files;
".cache/messages/"

files in ".cache" directory will not be synced;
so build directories must be put inside ".cache"; eg for Rust:
; nano ~/.cargo/config
  [build]
  target-dir = ".cache/cargo"
