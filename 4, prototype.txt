actually, implementing Comshell is a lot of work. first we must implement Frem language, then a graphics library, then a lot of standard u'i utilities on top of that library.
as a demonstration, we can build a prototype, using existing tools.

"https://python-gtk-3-tutorial.readthedocs.io/en/latest/index.html"
"https://github.com/GNOME/pygobject/tree/master/examples/"
"https://github.com/karlch/vimiv/"
"https://gitlab.gnome.org/gnumdk/eolie"
"https://lazka.github.io/pgi-docs/"
"https://wiki.gnome.org/Projects/GtkSourceView"

= Arch Linux
Arch Linux provides a binary/shared library distribution system (Pacman and AUR) which is very close to the original build process.

boot to an existing Arch Linux (installed or live) then:
$ timedatectl set-ntp true
prepare the disk (use lsblk to identify the block devices), and mount it:
  $ mkfs.btrfs -f /dev/sdx
  $ mount /dev/sdx /mnt
  btrfs is used because journaling file systems can only protect metadata, at an acceptable performance. since they need to write all file system operations twice, once to the journal, and once to the file system.
  copy'on'write provides consistency for both data and metadata.
  also, it can offer integrity of data and metadata (using checksums), at an acceptable overhead.
  in addition, c'o'w also supports the creation of cheap snapshots and clones (because it does not overwrite data in place). users can take fast online backups without the need to use any special software technique like l'v'm.
$ pacstrap /mnt grub sed intel-ucode linux systemd-sysvcompat btrfs-progs dhcpcd pacman nano man-db logrotate sudo alsa-utils noto-fonts ttf-hack sway rustup
$ arch-chroot /mnt
bootloader:
  $ grub-install --target=i386-pc /dev/sdx
  $ grub-mkconfig -o /boot/grub/grub.cfg
  $ nano boot/grub/grub.cfg
    set timeout = 0
$ systemctl enable dhcpcd.service
create user:
  $ useradd -m -G wheel user1
  $ passwd -d user1
  $ EDITOR=nano visudo
    %wheel      ALL=(ALL) ALL
$ nano /etc/systemd/system/getty@tty1.service.d/override.conf
  [Service]
  ExecStart=
  ExecStart=-/usr/bin/agetty --autologin user1 --noclear %I $TERM
$ systemctl enable systemd-timesyncd.service
$ amixer sset Master unmute
$ exit; reboot

$ nano ~/.bashrc
  sway
$ mkdir -p ~/.config/sway
$ nano ~/.config/sway/config
  default_border none
  exec "python ~/projects/Comshell/prototype/comshell.py; sway exit"
